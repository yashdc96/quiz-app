{"version":3,"sources":["helpers.js","components/AnswerConfirmation.jsx","components/Results.jsx","components/AnswerBank.jsx","components/DifficultyOptions.jsx","App.js","reportWebVitals.js","index.js"],"names":["styles","paper","padding","marginTop","marginBottom","borderRadius","witdth","boxShadow","mainTitle","fontSize","borderLeft","mainTitle2","title","align","textAlignLast","color","submitButton","background","width","backgroundColor","question","fontWeight","lineHeight","icon","time","verticalAlign","answer","marginLeft","display","correctAnswer","results","margin","textAlign","flexDirection","difficulties","id","name","createMarkup","text","__html","AnswerConfirmation","answers","processedAnswers","classes","resetQuiz","quizData","currentQuizStep","setCurrentQuizStep","questionCount","handleCount","setCorrectCounter","setQuestionCount","useState","nextVal","setNextVal","Typography","variant","className","map","isCorrect","wrongAnswer","Paper","dangerouslySetInnerHTML","Check","Close","Button","onClick","Results","correctCounter","useEffect","window","scrollTo","AnswerBank","selectedAnswers","setSelectedAnswers","setProcessedAnswers","setTime","counter","countDownTime","Date","now","interval","setInterval","distance","seconds","Math","floor","clearInterval","startTimer","length","onSubmit","e","preventDefault","relatedQuestion","find","category","correct_answer","Grid","container","spacing","item","xs","FormControl","fullWidth","InputLabel","Select","required","label","value","relatedAnswer","labelId","onChange","selectedQuestion","target","isExistQuestion","updatedAnswers","handleAnswerChange","MenuItem","type","useStyles","makeStyles","theme","DifficultyOptions","difficulty","setDifficulty","setQuizData","fetchQuizData","a","url","toLowerCase","axios","get","data","getCategory","cat","incorrectAnswersIndexes","incorrect_answers","randomIndex","round","random","splice","console","log","Container","selectedDifficulty","diff","alert","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd1a4dbc.chunk.js","sourcesContent":["export const styles = {\r\n    paper: {\r\n      padding: \"20px\",\r\n      marginTop: \"20px\",\r\n      marginBottom: \"20px\",\r\n      borderRadius: \"20px\",\r\n      witdth:\"95%\",\r\n      boxShadow:\r\n        \"0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2)\",\r\n    },\r\n    mainTitle: {\r\n      fontSize: \"35px\",\r\n      marginBottom: \"20px\",\r\n      borderLeft: \"5px solid #4285F4\",\r\n      padding: \"6px\"\r\n    },\r\n    mainTitle2: {\r\n      fontSize: \"35px\",\r\n      marginBottom: \"20px\",\r\n      padding: \"6px\"\r\n    },\r\n    title: {\r\n      fontSize: \"45px\",\r\n      marginBottom: \"20px\",\r\n      align:\"center\",\r\n      textAlignLast:\"center\",\r\n      color:\"#4285F4\"\r\n    },\r\n    submitButton: {\r\n      marginTop: \"20px\",\r\n      borderRadius: \"999px\",\r\n      background: \"#4285F4\",\r\n      width: \"100%\",\r\n      \"&:hover\": {\r\n        backgroundColor: \"#4285F4\",\r\n        boxShadow:\r\n          \"0 14px 26px -12px rgba(156, 39, 176, 0.42), 0 4px 23px 0px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(156, 39, 176, 0.2)\",\r\n      },\r\n    },\r\n    question: {\r\n      fontSize: \"24px\",\r\n      marginBottom: \"10px\",\r\n      fontWeight: \"500\",\r\n      lineHeight: \"35px\",\r\n      borderLeft: \"5px solid #4285F4\",\r\n      padding: \"8px\"\r\n    },\r\n    icon: {\r\n      fontSize: \"44px\",\r\n      fontWeight: \"500\", \r\n      marginBottom: \"10px\",\r\n      borderLeft: \"5px solid #4285F4\",\r\n      padding: \"5px\"\r\n    },\r\n    time: {\r\n      fontSize: \"40px\",\r\n      fontWeight: \"500\", \r\n      verticalAlign: \"top\",\r\n    },\r\n    answer: {\r\n      fontSize: \"18px\",\r\n      marginBottom: \"10px\",\r\n      fontWeight: \"500\",\r\n      lineHeight: \"25px\",\r\n      marginLeft: \"10px\",\r\n      display: \"flex\",\r\n    },\r\n    correctAnswer: {\r\n      color: \"green\",\r\n    },\r\n    results: {\r\n      display: \"flex\",\r\n      margin: \"0 auto\",\r\n      textAlign: \"center\",\r\n      flexDirection: \"column\",\r\n    },\r\n  };\r\n  \r\n  export const difficulties = [\r\n    { id: \"total_easy_question_count\", name: \"Easy\" },\r\n    { id: \"total_medium_question_count\", name: \"Medium\" },\r\n    { id: \"total_hard_question_count\", name: \"Hard\" },\r\n  ];\r\n  \r\n  export const createMarkup = (text) => {\r\n    return { __html: text };\r\n  };","import { Paper, Button, Typography } from \"@material-ui/core\";\r\nimport { Check, Close } from \"@material-ui/icons\";\r\nimport { createMarkup } from \"../helpers\";\r\nimport AnswerBank from \"./AnswerBank\";\r\nimport { useState } from \"react\";\r\n\r\nconst AnswerConfirmation = ({ processedAnswers, classes, resetQuiz, quizData, currentQuizStep, setCurrentQuizStep, questionCount, handleCount, setCorrectCounter, setQuestionCount }) => {\r\n  const [nextVal, setNextVal] = useState(false);\r\n\r\n\r\n  const renderAnswers = (answers) => {\r\n    return answers.map(\r\n      ({ question, isCorrect, correctAnswer, wrongAnswer }) => (\r\n        <Paper key={question} className={classes.paper}>\r\n          <Typography variant=\"h2\" className={classes.question}>\r\n            <span dangerouslySetInnerHTML={createMarkup(question)} />\r\n          </Typography>\r\n\r\n          {isCorrect ? (\r\n            <Typography\r\n              variant=\"h2\"\r\n              className={`${classes.answer} ${classes.correctAnswer}`}\r\n            >\r\n              <Check />\r\n              <span\r\n                className={classes.answer}\r\n                dangerouslySetInnerHTML={createMarkup(correctAnswer)}\r\n              />\r\n            </Typography>\r\n          ) : (\r\n              <>\r\n                <Typography\r\n                  variant=\"h3\"\r\n                  color=\"secondary\"\r\n                  className={classes.answer}\r\n                >\r\n                  <Close />\r\n                  <span\r\n                    className={classes.answer}\r\n                    dangerouslySetInnerHTML={createMarkup(wrongAnswer)}\r\n                  />\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"h3\"\r\n                  className={`${classes.answer} ${classes.correctAnswer}`}\r\n                >\r\n                  <Check />\r\n                  <span\r\n                    className={classes.answer}\r\n                    dangerouslySetInnerHTML={createMarkup(correctAnswer)}\r\n                  />\r\n                </Typography>\r\n              </>\r\n            )}\r\n        </Paper>\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setNextVal(!nextVal);\r\n    if (questionCount === 10) {\r\n      handleCount();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      { !nextVal && (\r\n        <>\r\n          <Typography variant=\"h1\" className={classes.mainTitle}>\r\n            Answers review:\r\n      </Typography>\r\n          {renderAnswers(processedAnswers)}\r\n          <Button\r\n            className={classes.submitButton}\r\n            onClick={resetQuiz}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Reset\r\n          </Button>\r\n          <Button\r\n            className={classes.submitButton}\r\n            onClick={handleNext}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Next\r\n      </Button> </>)}\r\n      { nextVal && (\r\n        <AnswerBank\r\n          classes={classes}\r\n          quizData={quizData}\r\n          resetQuiz={resetQuiz}\r\n          currentQuizStep={currentQuizStep}\r\n          setCurrentQuizStep={setCurrentQuizStep}\r\n          questionCount={questionCount}\r\n          setQuestionCount={setQuestionCount}\r\n          setCorrectCounter={setCorrectCounter}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AnswerConfirmation;","import { Button, Typography } from \"@material-ui/core\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Results = ({\r\n  classes,\r\n  resetQuiz,\r\n  currentQuizStep,\r\n  correctCounter,\r\n}) => {\r\n  useEffect(() => {\r\n    window.scrollTo(0, \"20px\");\r\n  }, []);\r\n  return currentQuizStep === \"results\" ? (\r\n    <div className={classes.results}>\r\n      <Typography variant=\"h1\" className={classes.title}>\r\n        Results\r\n      </Typography>\r\n      <Typography variant=\"h4\" className={classes.mainTitle2}>\r\n        You have answered {correctCounter} questions correctly.\r\n      </Typography>\r\n      <Button\r\n        onClick={resetQuiz}\r\n        className={classes.submitButton}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n      >\r\n        Reset\r\n      </Button>\r\n    </div>\r\n  ):(<> Error </>);\r\n};\r\n\r\nexport default Results;","import {\r\n  Grid,\r\n  Paper,\r\n  Select,\r\n  Button,\r\n  MenuItem,\r\n  Typography,\r\n  InputLabel,\r\n  FormControl,\r\n} from \"@material-ui/core\";\r\nimport { React, useState, useEffect } from \"react\";\r\nimport { createMarkup } from \"../helpers\";\r\nimport AnswerConfirmation from \"./AnswerConfirmation\";\r\nimport Results from \"./Results\";\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\n\r\nconst AnswerBank = ({\r\n  classes,\r\n  quizData,\r\n  resetQuiz,\r\n  currentQuizStep,\r\n  setCurrentQuizStep,\r\n  questionCount,\r\n  setQuestionCount,\r\n  setCorrectCounter,\r\n  correctCounter,\r\n}) => {\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n  const [processedAnswers, setProcessedAnswers] = useState([]);\r\n  const [time, setTime] = useState({});\r\n\r\n  const startTimer = () => {\r\n    const countDownTime = Date.now() + 12000;\r\n    const interval = setInterval(() => {\r\n      const now = new Date();\r\n      const distance = countDownTime - now\r\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n      if (distance < 0) {\r\n        clearInterval(interval);\r\n        setTime({ seconds: 0 })\r\n      } else {\r\n        setTime({ seconds: seconds })\r\n      }\r\n    }, 1000)\r\n  }\r\n\r\n  const handleResult = (e) => {\r\n    e.preventDefault();\r\n    handleCount();\r\n    const processedAnswers = selectedAnswers.map(({ answer, question }) => {\r\n      const relatedQuestion = quizData.find(\r\n        (category) => category.question === question\r\n      );\r\n      if (relatedQuestion.correct_answer === answer) {\r\n        return { correctAnswer: answer, isCorrect: true, question };\r\n      }\r\n      return {\r\n        correctAnswer: relatedQuestion.correct_answer,\r\n        wrongAnswer: answer,\r\n        isCorrect: false,\r\n        question,\r\n      };\r\n    });\r\n    counter(processedAnswers);\r\n    setProcessedAnswers(processedAnswers);\r\n  };\r\n\r\n  const counter = (answer) => {\r\n    if (answer[0].isCorrect) {\r\n      setCorrectCounter((correctCounter) => correctCounter + 1);\r\n    }\r\n  }\r\n\r\n\r\n  const handleAnswerChange = (e, selectedQuestion) => {\r\n    e.preventDefault();\r\n    const { value } = e.target;\r\n\r\n    const isExistQuestion =\r\n      selectedAnswers.length &&\r\n      selectedAnswers.find((answer) => answer.question === selectedQuestion);\r\n\r\n    if (isExistQuestion && isExistQuestion.answer) {\r\n      const updatedAnswers = selectedAnswers.map((answer) => {\r\n        if (answer.question === selectedQuestion) {\r\n          return { question: selectedQuestion, answer: value };\r\n        }\r\n        return answer;\r\n      });\r\n      setSelectedAnswers(updatedAnswers);\r\n    } else {\r\n      setSelectedAnswers([\r\n        ...selectedAnswers,\r\n        { question: selectedQuestion, answer: value },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const relatedAnswer = (question, selectedAnswers) => {\r\n    if (selectedAnswers && selectedAnswers.length) {\r\n      const relatedQuestion = selectedAnswers.find(\r\n        (answer) => answer.question === question\r\n      );\r\n      return (relatedQuestion && relatedQuestion.answer) || \"\";\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  const handleCount = () => {\r\n    setQuestionCount(questionCount + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, \"20px\");\r\n    startTimer();\r\n  }, []);\r\n\r\n  return !processedAnswers || !processedAnswers.length ? (\r\n    <>\r\n        {time.seconds === 0 && resetQuiz()}\r\n      <Typography variant=\"h1\" className={classes.mainTitle}>\r\n        Question: {questionCount + 1}\r\n      </Typography>\r\n         <AccessAlarmIcon className={classes.icon} color=\"primary\" /> <span className={classes.time}> : {time.seconds} </span>\r\n      <form onSubmit={handleResult}>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={12}>\r\n\r\n            <Paper key={quizData[questionCount].question} className={classes.paper}>\r\n              <Typography variant=\"h5\" className={classes.question}>\r\n                <span> {quizData[questionCount].question} </span>\r\n              </Typography>\r\n              <FormControl fullWidth variant=\"outlined\">\r\n                <InputLabel id=\"answer-select-label\">\r\n                  Select answer:\r\n                    </InputLabel>\r\n                <Select\r\n                  required\r\n                  name=\"answer\"\r\n                  id=\"answer-select\"\r\n                  label=\"Select answer\"\r\n                  value={relatedAnswer(quizData[questionCount].question, selectedAnswers) || \"\"}\r\n                  labelId=\"answer-select-label\"\r\n                  onChange={(e) => handleAnswerChange(e, quizData[questionCount].question)}\r\n                >\r\n                  {quizData[questionCount].answers.map((answer) => (\r\n                    <MenuItem key={answer} value={answer}>\r\n                      <span dangerouslySetInnerHTML={createMarkup(answer)} />\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Paper>\r\n\r\n            <Button\r\n              className={classes.submitButton}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Result\r\n              </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </>\r\n  ) : (<>\r\n    {questionCount <= 10 && quizData.length && (\r\n      <>\r\n        <AnswerConfirmation\r\n          classes={classes}\r\n          resetQuiz={resetQuiz}\r\n          quizData={quizData}\r\n          currentQuizStep={currentQuizStep}\r\n          setCurrentQuizStep={setCurrentQuizStep}\r\n          questionCount={questionCount}\r\n          setQuestionCount={setQuestionCount}\r\n          processedAnswers={processedAnswers}\r\n          setCorrectCounter={setCorrectCounter}\r\n          handleCount={handleCount}\r\n        />\r\n      </>\r\n    )}\r\n\r\n    {questionCount > 10 && (\r\n      <>\r\n        <Results\r\n          classes={classes}\r\n          resetQuiz={resetQuiz}\r\n          currentQuizStep={currentQuizStep}\r\n          setCurrentQuizStep={setCurrentQuizStep}\r\n          correctCounter={correctCounter}\r\n        />\r\n      </>\r\n    )}\r\n  </>\r\n    );\r\n};\r\n\r\nexport default AnswerBank;","import { useState, useEffect } from \"react\";\r\nimport { Grid, Paper, Select, Button, MenuItem, Container, Typography, InputLabel, FormControl } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { styles, difficulties } from \"../helpers\";\r\nimport AnswerBank from \"./AnswerBank\";\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    return styles;\r\n});\r\n\r\nconst DifficultyOptions = () => {\r\n    const [difficulty, setDifficulty] = useState({ id: \"\", name: \"\" });\r\n    const [quizData, setQuizData] = useState([]);\r\n    const classes = useStyles();\r\n    const [currentQuizStep, setCurrentQuizStep] = useState(\"start\");\r\n    const [questionCount, setQuestionCount] = useState(-1);\r\n    const [correctCounter, setCorrectCounter] = useState(0);\r\n\r\n    const fetchQuizData = async () => {\r\n        try {\r\n            const url = `https://opentdb.com/api.php?amount=10&category=18&difficulty=${difficulty.name.toLowerCase()}`;\r\n            const { data } = await axios.get(url);\r\n\r\n            const getCategory = data.results.map((cat) => {\r\n\r\n                const incorrectAnswersIndexes = cat.incorrect_answers.length;\r\n                const randomIndex = Math.round(\r\n                    Math.random() * (incorrectAnswersIndexes - 0) + 0\r\n                );\r\n\r\n                cat.incorrect_answers.splice(randomIndex, 0, cat.correct_answer);\r\n\r\n                return {\r\n                    ...cat,\r\n                    answers: cat.incorrect_answers,\r\n                };\r\n            });\r\n\r\n            setQuizData(getCategory);\r\n            setCurrentQuizStep(\"results\");\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, \"20px\");\r\n    }, []);\r\n\r\n    const startQuiz = () => {\r\n        setQuestionCount(0);\r\n        setCorrectCounter(0);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (quizData.length === 0 && difficulty) {\r\n            fetchQuizData();\r\n            startQuiz();\r\n        }\r\n    };\r\n\r\n\r\n    const handleDifficultyChange = (e) => {\r\n        e.preventDefault();\r\n        const selectedDifficulty = difficulties.find(\r\n            (diff) => diff.id === e.target.value\r\n        );\r\n        setDifficulty(selectedDifficulty);\r\n    };\r\n\r\n    const resetQuiz = (time) => {\r\n        setQuizData([]);\r\n        setCorrectCounter(0);\r\n        setDifficulty(\"\");\r\n        setCurrentQuizStep(\"start\");\r\n        setQuestionCount(-1);\r\n        window.scrollTo(0, \"20px\");\r\n        if(time===0){\r\n            alert(\"You ran out of time!\")\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Paper className={classes.paper}>\r\n                {currentQuizStep === \"start\" && (\r\n                    <>\r\n                        <Typography variant=\"h1\" className={classes.title}>\r\n                            Computer Science Quiz\r\n                        </Typography>\r\n                        <Typography variant=\"h6\" className={classes.mainTitle}>\r\n                            Choose your difficulty:\r\n                        </Typography>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <Grid container spacing={4}>\r\n                                <Grid item xs={12}>\r\n                                    <FormControl fullWidth variant=\"outlined\">\r\n                                        <InputLabel id=\"difficulty-select-label\">\r\n                                            Select Difficulty:\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            required\r\n                                            name=\"difficulty\"\r\n                                            value={difficulty.id || \"\"}\r\n                                            id=\"difficulty-select\"\r\n                                            label=\"Select Difficulty\"\r\n                                            labelId=\"difficulty-select-label\"\r\n                                            onChange={handleDifficultyChange}\r\n                                        >\r\n                                            {difficulties.map((difficulty) => (\r\n                                                <MenuItem key={difficulty.id} value={difficulty.id}>\r\n                                                    {difficulty.name}\r\n                                                </MenuItem>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Button\r\n                                className={classes.submitButton}\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                            >\r\n                                Submit\r\n                            </Button>\r\n                        </form>\r\n                    </>\r\n                )} {questionCount > -1 && quizData.length && (\r\n                    <AnswerBank\r\n                        classes={classes}\r\n                        quizData={quizData}\r\n                        resetQuiz={resetQuiz}\r\n                        currentQuizStep={currentQuizStep}\r\n                        setCurrentQuizStep={setCurrentQuizStep}\r\n                        questionCount={questionCount}\r\n                        setQuestionCount={setQuestionCount}\r\n                        setCorrectCounter={setCorrectCounter}\r\n                        correctCounter={correctCounter}\r\n                    />\r\n                )}\r\n            </Paper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default DifficultyOptions;","import DifficultyOptions from \"./components/DifficultyOptions\"\n\nconst App = () => {\n  return <DifficultyOptions />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \n      <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}